general folder and files tree

├── codebase-context.txt
├── db
│   ├── 01_video.sql
│   ├── 02_messenger.sql
│   └── 03_delivery.sql
├── nest-cli.json
├── package.json
├── public
│   └── index.html
├── src
│   ├── app.controller.ts
│   ├── app.module.ts
│   ├── app.service.ts
│   └── main.ts


codebase-context.txt:
general folder and files tree

├── db
│   ├── 01_video.sql
│   ├── 02_messenger.sql
│   └── 03_delivery.sql
├── nest-cli.json
├── package.json
├── public
│   └── index.html
├── src
│   ├── app.controller.ts
│   ├── app.module.ts
│   ├── app.service.ts
│   └── main.ts


db/01_video.sql:
CREATE SCHEMA video;

CREATE TABLE video.users (
    user_id SERIAL PRIMARY KEY,
    name    VARCHAR(80) NOT NULL,
    email   VARCHAR(120) UNIQUE
);

CREATE TABLE video.videos (
    video_id SERIAL PRIMARY KEY,
    title        VARCHAR(200),
    description  TEXT,
    upload_date  TIMESTAMP DEFAULT now(),
    author_id    INT REFERENCES video.users
);

CREATE TABLE video.comments (
    comment_id SERIAL PRIMARY KEY,
    content    TEXT,
    posted_at  TIMESTAMP DEFAULT now(),
    video_id   INT REFERENCES video.videos,
    author_id  INT REFERENCES video.users,
    parent_id  INT REFERENCES video.comments
);

CREATE TABLE video.tags   (
    tag_id   SERIAL PRIMARY KEY,
    tag_name VARCHAR(50) UNIQUE
);
CREATE TABLE video.video_tags (
    video_id INT REFERENCES video.videos,
    tag_id   INT REFERENCES video.tags,
    PRIMARY KEY (video_id, tag_id)
);
CREATE TABLE video.likes  (
    like_id  SERIAL PRIMARY KEY,
    video_id INT REFERENCES video.videos,
    user_id  INT REFERENCES video.users,
    UNIQUE (video_id,user_id)
); 
-------------

db/02_messenger.sql:
CREATE SCHEMA messenger;

CREATE TABLE messenger.users (
    user_id  SERIAL PRIMARY KEY,
    username VARCHAR(80)
);

CREATE TABLE messenger.messages (
    msg_id        SERIAL PRIMARY KEY,
    content       TEXT,
    sent_time     TIMESTAMP DEFAULT now(),
    sender_id     INT REFERENCES messenger.users,
    receiver_id   INT REFERENCES messenger.users,
    reply_to_id   INT REFERENCES messenger.messages,
    fwd_from_id   INT REFERENCES messenger.messages
);

CREATE TABLE messenger.attachments (
    attach_id  SERIAL PRIMARY KEY,
    file_name  VARCHAR(120),
    file_type  VARCHAR(40),
    msg_id     INT REFERENCES messenger.messages
); 
-------------

db/03_delivery.sql:
CREATE EXTENSION IF NOT EXISTS postgis;   -- для гео‑точек
CREATE SCHEMA delivery;

CREATE TABLE delivery.points (
    point_id  SERIAL PRIMARY KEY,
    address   TEXT,
    coord     geometry(Point, 4326)
);

CREATE TABLE delivery.couriers (
    courier_id SERIAL PRIMARY KEY,
    name       VARCHAR(80),
    phone      VARCHAR(20)
);

CREATE TABLE delivery.statuses (
    status_id  SERIAL PRIMARY KEY,
    status_name VARCHAR(40)
);

INSERT INTO delivery.statuses(status_name)
VALUES ('CREATED'),('ON_ROUTE'),('DELIVERED'),('CANCELLED');

CREATE TABLE delivery.routes (
    route_id  SERIAL PRIMARY KEY,
    route_name VARCHAR(120),
    courier_id INT REFERENCES delivery.couriers
);

CREATE TABLE delivery.route_points (
    route_id INT REFERENCES delivery.routes,
    point_id INT REFERENCES delivery.points,
    seq_no   INT,
    PRIMARY KEY (route_id, point_id)
);

CREATE TABLE delivery.deliveries (
    delivery_id SERIAL PRIMARY KEY,
    pickup_id   INT REFERENCES delivery.points,
    dropoff_id  INT REFERENCES delivery.points,
    courier_id  INT REFERENCES delivery.couriers,
    status_id   INT REFERENCES delivery.statuses,
    route_id    INT REFERENCES delivery.routes
); 
-------------

nest-cli.json:
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}

-------------

package.json:
{
  "name": "sqlcoder-llm",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/serve-static": "5.0.3",
    "node-fetch": "2",
    "ollama": "0.5.15",
    "reflect-metadata": "^0.2.0",
    "rxjs": "7.8.2"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.3.1",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  },
  "packageManager": "yarn@1.22.22+sha512.a6b2f7906b721bba3d67d4aff083df04dad64c399707841b7acf00f6b133b7ac24255f2652fa22ae3534329dc6180534e98d17432037ff6fd140556e2bb3137e"
}

-------------

public/index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM SQL Interface</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        textarea {
            width: 100%;
            height: 150px;
            margin-bottom: 10px;
            padding: 8px;
        }
        button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        #result {
            margin-top: 20px;
            border: 1px solid #ddd;
            padding: 10px;
            white-space: pre-wrap;
        }
        select {
            margin-bottom: 10px;
            padding: 8px;
            width: 100%;
        }
        .button-group {
            display: flex;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>LLM SQL Interface</h1>
    <div>
        <h2>Enter your query:</h2>
        <select id="domainInput">
            <option value="video">Video</option>
            <option value="messenger">Messenger</option>
            <option value="delivery">Delivery</option>
        </select>
        <textarea id="queryInput" placeholder="Enter your natural language query here..."></textarea>
        <div class="button-group">
            <button onclick="submitQuery(false)">Generate SQL</button>
            <button onclick="submitQuery(true)">Stream SQL</button>
        </div>
    </div>
    <div>
        <h2>Result:</h2>
        <div id="result">Results will appear here...</div>
    </div>

    <script>
        async function submitQuery(useStream = false) {
            const query = document.getElementById('queryInput').value;
            const domain = document.getElementById('domainInput').value;
            const resultElement = document.getElementById('result');
            
            if (!query) {
                resultElement.textContent = "Please enter a query";
                return;
            }
            
            resultElement.textContent = "Processing...";
            
            if (useStream) {
                try {
                    const response = await fetch('/generate-sql-stream', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ query, domain })
                    });
                    
                    const reader = response.body.getReader();
                    let accumulatedResponse = '';
                    
                    while (true) {
                        const { done, value } = await reader.read();
                        
                        if (done) {
                            break;
                        }
                        
                        // Decode the chunk
                        const chunk = new TextDecoder().decode(value);
                        try {
                            const jsonChunk = JSON.parse(chunk);
                            accumulatedResponse += jsonChunk.response;
                            resultElement.textContent = accumulatedResponse;
                        } catch (e) {
                            console.error('Error parsing chunk:', e);
                        }
                    }
                } catch (error) {
                    resultElement.textContent = `Error: ${error.message}`;
                }
            } else {
                try {
                    const response = await fetch('/generate-sql', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ query, domain })
                    });
                    
                    const data = await response.json();
                    resultElement.textContent = data.sql || data.error || "No result returned";
                } catch (error) {
                    resultElement.textContent = `Error: ${error.message}`;
                }
            }
        }
    </script>
</body>
</html> 
-------------

src/app.controller.ts:
import { Controller, Post, Body, Res } from '@nestjs/common';
import { AppService } from './app.service';
import { Response } from 'express';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Post('generate-sql')
  async generateSql(
    @Body() body: { query: string; domain: string },
    @Res() res: Response,
  ) {
    try {
      const result = await this.appService.generateSql(body.query, body.domain);
      res.json(result);
    } catch (e) {
      res.status(500).json({ error: e.message });
    }
  }

  @Post('generate-sql-stream')
  async generateSqlStream(
    @Body() body: { query: string; domain: string },
    @Res() res: Response,
  ) {
    try {
      res.setHeader('Content-Type', 'text/event-stream');
      res.setHeader('Cache-Control', 'no-cache');
      res.setHeader('Connection', 'keep-alive');

      const stream = await this.appService.generateSqlStream(
        body.query,
        body.domain,
      );

      stream.subscribe({
        next: (chunk) => {
          res.write(chunk);
        },
        error: (error) => {
          console.error('Stream error:', error);
          res.end();
        },
        complete: () => {
          res.end();
        },
      });
    } catch (e) {
      console.error('Error in generate-sql-stream:', e);
      res.status(500).json({ error: e.message });
    }
  }
}

-------------

src/app.module.ts:
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';

@Module({
  imports: [
    ServeStaticModule.forRoot({
      rootPath: join(__dirname, '..', 'public'),
      exclude: ['/generate-sql*'],
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

-------------

src/app.service.ts:
import { Injectable } from '@nestjs/common';
import { GenerateRequest, Ollama } from 'ollama';
import * as fs from 'fs';
import * as path from 'path';
import { from, Observable } from 'rxjs';

@Injectable()
export class AppService {
  private readonly ollama: Ollama;
  private readonly schemaCache: Record<string, string> = {};

  constructor() {
    this.ollama = new Ollama({ host: 'http://localhost:11434' });
    // Preload schemas
    this.loadSchemas();
  }

  private loadSchemas() {
    const dbDir = path.join(process.cwd(), 'db');

    // Map domain names to their respective schema files
    const schemaFiles = {
      video: '01_video.sql',
      messenger: '02_messenger.sql',
      delivery: '03_delivery.sql',
    };

    // Load each schema into cache
    Object.entries(schemaFiles).forEach(([domain, filename]) => {
      try {
        const schemaPath = path.join(dbDir, filename);
        const schema = fs.readFileSync(schemaPath, 'utf8');
        this.schemaCache[domain] = schema;
      } catch (error) {
        console.error(`Error loading schema for ${domain}:`, error);
        this.schemaCache[domain] = 'Schema not available';
      }
    });
  }

  getPrompt(domain: string, nl: string): string {
    const schema = this.schemaCache[domain] || 'Schema not available';
    return `### Instructions:
Your task is to convert a question into a SQL query, given a Postgres database schema.
Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, \`SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id\`.
- When creating a ratio, always cast the numerator as float

### Input:
Generate a SQL query that answers the question \`{${nl}}\`.
This query will run on a database whose schema is represented in this string:
${schema}

### Response:
Based on your instructions, here is the SQL query I have generated to answer the question \`{${nl}}\`:
\`\`\`sql
`;
  }

  getOllamaRequest(domain: string, query: string): GenerateRequest {
    return {
      model: 'sqlcoder:7b',
      prompt: this.getPrompt(domain, query),
    };
  }

  async generateSql(query: string, domain: string): Promise<{ sql: string }> {
    const prompt = this.getPrompt(domain, query);

    try {
      console.log('Generating SQL...');
      const response = await this.ollama.generate({
        model: 'sqlcoder:7b',
        prompt,
        stream: false,
      });
      console.log(response);
      return { sql: response.response };
    } catch (error) {
      console.error('Error generating SQL:', error);
      throw new Error('Failed to generate SQL: ' + error.message);
    }
  }

  async generateSqlStream(
    query: string,
    domain: string,
  ): Promise<Observable<string>> {
    return from(
      generateChunks(this.ollama, this.getOllamaRequest(domain, query)),
    );
  }
}

async function* generateChunks(ollama: Ollama, request: GenerateRequest) {
  const stream = await ollama.generate({
    ...request,
    stream: true,
  });

  for await (const chunk of stream) {
    yield JSON.stringify({ response: chunk.response, done: chunk.done });
  }
}

-------------

src/main.ts:
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  app.useStaticAssets(join(__dirname, '..', 'public'));
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

-------------


-------------

db/01_video.sql:
CREATE SCHEMA video;

CREATE TABLE video.users (
    user_id SERIAL PRIMARY KEY,
    name    VARCHAR(80) NOT NULL,
    email   VARCHAR(120) UNIQUE
);

CREATE TABLE video.videos (
    video_id SERIAL PRIMARY KEY,
    title        VARCHAR(200),
    description  TEXT,
    upload_date  TIMESTAMP DEFAULT now(),
    author_id    INT REFERENCES video.users
);

CREATE TABLE video.comments (
    comment_id SERIAL PRIMARY KEY,
    content    TEXT,
    posted_at  TIMESTAMP DEFAULT now(),
    video_id   INT REFERENCES video.videos,
    author_id  INT REFERENCES video.users,
    parent_id  INT REFERENCES video.comments
);

CREATE TABLE video.tags   (
    tag_id   SERIAL PRIMARY KEY,
    tag_name VARCHAR(50) UNIQUE
);
CREATE TABLE video.video_tags (
    video_id INT REFERENCES video.videos,
    tag_id   INT REFERENCES video.tags,
    PRIMARY KEY (video_id, tag_id)
);
CREATE TABLE video.likes  (
    like_id  SERIAL PRIMARY KEY,
    video_id INT REFERENCES video.videos,
    user_id  INT REFERENCES video.users,
    UNIQUE (video_id,user_id)
); 
-------------

db/02_messenger.sql:
CREATE SCHEMA messenger;

CREATE TABLE messenger.users (
    user_id  SERIAL PRIMARY KEY,
    username VARCHAR(80)
);

CREATE TABLE messenger.messages (
    msg_id        SERIAL PRIMARY KEY,
    content       TEXT,
    sent_time     TIMESTAMP DEFAULT now(),
    sender_id     INT REFERENCES messenger.users,
    receiver_id   INT REFERENCES messenger.users,
    reply_to_id   INT REFERENCES messenger.messages,
    fwd_from_id   INT REFERENCES messenger.messages
);

CREATE TABLE messenger.attachments (
    attach_id  SERIAL PRIMARY KEY,
    file_name  VARCHAR(120),
    file_type  VARCHAR(40),
    msg_id     INT REFERENCES messenger.messages
); 
-------------

db/03_delivery.sql:
CREATE EXTENSION IF NOT EXISTS postgis;   -- для гео‑точек
CREATE SCHEMA delivery;

CREATE TABLE delivery.points (
    point_id  SERIAL PRIMARY KEY,
    address   TEXT,
    coord     geometry(Point, 4326)
);

CREATE TABLE delivery.couriers (
    courier_id SERIAL PRIMARY KEY,
    name       VARCHAR(80),
    phone      VARCHAR(20)
);

CREATE TABLE delivery.statuses (
    status_id  SERIAL PRIMARY KEY,
    status_name VARCHAR(40)
);

INSERT INTO delivery.statuses(status_name)
VALUES ('CREATED'),('ON_ROUTE'),('DELIVERED'),('CANCELLED');

CREATE TABLE delivery.routes (
    route_id  SERIAL PRIMARY KEY,
    route_name VARCHAR(120),
    courier_id INT REFERENCES delivery.couriers
);

CREATE TABLE delivery.route_points (
    route_id INT REFERENCES delivery.routes,
    point_id INT REFERENCES delivery.points,
    seq_no   INT,
    PRIMARY KEY (route_id, point_id)
);

CREATE TABLE delivery.deliveries (
    delivery_id SERIAL PRIMARY KEY,
    pickup_id   INT REFERENCES delivery.points,
    dropoff_id  INT REFERENCES delivery.points,
    courier_id  INT REFERENCES delivery.couriers,
    status_id   INT REFERENCES delivery.statuses,
    route_id    INT REFERENCES delivery.routes
); 
-------------

nest-cli.json:
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}

-------------

package.json:
{
  "name": "sqlcoder-llm",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/serve-static": "5.0.3",
    "node-fetch": "2",
    "ollama": "0.5.15",
    "reflect-metadata": "^0.2.0",
    "rxjs": "7.8.2"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.3.1",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  },
  "packageManager": "yarn@1.22.22+sha512.a6b2f7906b721bba3d67d4aff083df04dad64c399707841b7acf00f6b133b7ac24255f2652fa22ae3534329dc6180534e98d17432037ff6fd140556e2bb3137e"
}

-------------

public/index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM SQL Interface</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        textarea {
            width: 100%;
            height: 150px;
            margin-bottom: 10px;
            padding: 8px;
        }
        button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        #result {
            margin-top: 20px;
            border: 1px solid #ddd;
            padding: 10px;
            white-space: pre-wrap;
        }
        select {
            margin-bottom: 10px;
            padding: 8px;
            width: 100%;
        }
        .button-group {
            display: flex;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>LLM SQL Interface</h1>
    <div>
        <h2>Enter your query:</h2>
        <select id="domainInput">
            <option value="video">Video</option>
            <option value="messenger">Messenger</option>
            <option value="delivery">Delivery</option>
        </select>
        <textarea id="queryInput" placeholder="Enter your natural language query here..."></textarea>
        <div class="button-group">
            <button onclick="submitQuery(false)">Generate SQL</button>
            <button onclick="submitQuery(true)">Stream SQL</button>
        </div>
    </div>
    <div>
        <h2>Result:</h2>
        <div id="result">Results will appear here...</div>
    </div>

    <script>
        async function submitQuery(useStream = false) {
            const query = document.getElementById('queryInput').value;
            const domain = document.getElementById('domainInput').value;
            const resultElement = document.getElementById('result');
            
            if (!query) {
                resultElement.textContent = "Please enter a query";
                return;
            }
            
            resultElement.textContent = "Processing...";
            
            if (useStream) {
                try {
                    const response = await fetch('/generate-sql-stream', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ query, domain })
                    });
                    
                    const reader = response.body.getReader();
                    let accumulatedResponse = '';
                    
                    while (true) {
                        const { done, value } = await reader.read();
                        
                        if (done) {
                            break;
                        }
                        
                        // Decode the chunk
                        const chunk = new TextDecoder().decode(value);
                        try {
                            const jsonChunk = JSON.parse(chunk);
                            accumulatedResponse += jsonChunk.response;
                            resultElement.textContent = accumulatedResponse;
                        } catch (e) {
                            console.error('Error parsing chunk:', e);
                        }
                    }
                } catch (error) {
                    resultElement.textContent = `Error: ${error.message}`;
                }
            } else {
                try {
                    const response = await fetch('/generate-sql', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ query, domain })
                    });
                    
                    const data = await response.json();
                    resultElement.textContent = data.sql || data.error || "No result returned";
                } catch (error) {
                    resultElement.textContent = `Error: ${error.message}`;
                }
            }
        }
    </script>
</body>
</html> 
-------------

src/app.controller.ts:
import { Controller, Post, Body, Res } from '@nestjs/common';
import { AppService } from './app.service';
import { Response } from 'express';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Post('generate-sql')
  async generateSql(
    @Body() body: { query: string; domain: string },
    @Res() res: Response,
  ) {
    try {
      const result = await this.appService.generateSql(body.query, body.domain);
      res.json(result);
    } catch (e) {
      res.status(500).json({ error: e.message });
    }
  }

  @Post('generate-sql-stream')
  async generateSqlStream(
    @Body() body: { query: string; domain: string },
    @Res() res: Response,
  ) {
    try {
      res.setHeader('Content-Type', 'text/event-stream');
      res.setHeader('Cache-Control', 'no-cache');
      res.setHeader('Connection', 'keep-alive');

      const stream = await this.appService.generateSqlStream(
        body.query,
        body.domain,
      );

      stream.subscribe({
        next: (chunk) => {
          res.write(chunk);
        },
        error: (error) => {
          console.error('Stream error:', error);
          res.end();
        },
        complete: () => {
          res.end();
        },
      });
    } catch (e) {
      console.error('Error in generate-sql-stream:', e);
      res.status(500).json({ error: e.message });
    }
  }
}

-------------

src/app.module.ts:
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';

@Module({
  imports: [
    ServeStaticModule.forRoot({
      rootPath: join(__dirname, '..', 'public'),
      exclude: ['/generate-sql*'],
    }),
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}

-------------

src/app.service.ts:
import { Injectable } from '@nestjs/common';
import { GenerateRequest, Ollama } from 'ollama';
import * as fs from 'fs';
import * as path from 'path';
import { from, Observable } from 'rxjs';

@Injectable()
export class AppService {
  private readonly ollama: Ollama;
  private readonly schemaCache: Record<string, string> = {};

  constructor() {
    this.ollama = new Ollama({ host: 'http://localhost:11434' });
    // Preload schemas
    this.loadSchemas();
  }

  private loadSchemas() {
    const dbDir = path.join(process.cwd(), 'db');

    // Map domain names to their respective schema files
    const schemaFiles = {
      video: '01_video.sql',
      messenger: '02_messenger.sql',
      delivery: '03_delivery.sql',
    };

    // Load each schema into cache
    Object.entries(schemaFiles).forEach(([domain, filename]) => {
      try {
        const schemaPath = path.join(dbDir, filename);
        const schema = fs.readFileSync(schemaPath, 'utf8');
        this.schemaCache[domain] = schema;
      } catch (error) {
        console.error(`Error loading schema for ${domain}:`, error);
        this.schemaCache[domain] = 'Schema not available';
      }
    });
  }

  getPrompt(domain: string, nl: string): string {
    const schema = this.schemaCache[domain] || 'Schema not available';
    return `### Instructions:
Your task is to convert a question into a SQL query, given a Postgres database schema.
Adhere to these rules:
- **Deliberately go through the question and database schema word by word** to appropriately answer the question
- **Use Table Aliases** to prevent ambiguity. For example, \`SELECT table1.col1, table2.col1 FROM table1 JOIN table2 ON table1.id = table2.id\`.
- When creating a ratio, always cast the numerator as float

### Input:
Generate a SQL query that answers the question \`{${nl}}\`.
This query will run on a database whose schema is represented in this string:
${schema}

### Response:
Based on your instructions, here is the SQL query I have generated to answer the question \`{${nl}}\`:
\`\`\`sql
`;
  }

  getOllamaRequest(domain: string, query: string): GenerateRequest {
    return {
      model: 'sqlcoder:7b',
      prompt: this.getPrompt(domain, query),
    };
  }

  async generateSql(query: string, domain: string): Promise<{ sql: string }> {
    const prompt = this.getPrompt(domain, query);

    try {
      console.log('Generating SQL...');
      const response = await this.ollama.generate({
        model: 'sqlcoder:7b',
        prompt,
        stream: false,
      });
      console.log(response);
      return { sql: response.response };
    } catch (error) {
      console.error('Error generating SQL:', error);
      throw new Error('Failed to generate SQL: ' + error.message);
    }
  }

  async generateSqlStream(
    query: string,
    domain: string,
  ): Promise<Observable<string>> {
    return from(
      generateChunks(this.ollama, this.getOllamaRequest(domain, query)),
    );
  }
}

async function* generateChunks(ollama: Ollama, request: GenerateRequest) {
  const stream = await ollama.generate({
    ...request,
    stream: true,
  });

  for await (const chunk of stream) {
    yield JSON.stringify({ response: chunk.response, done: chunk.done });
  }
}

-------------

src/main.ts:
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';
import { join } from 'path';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  app.useStaticAssets(join(__dirname, '..', 'public'));
  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();

-------------

