INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Show all videos with their author name.', 'SELECT v.title, u.name AS author_name FROM video.videos v JOIN video.users u ON v.author_id = u.user_id;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find all videos uploaded in 2023.', 'SELECT v.title, v.upload_date FROM video.videos v WHERE v.upload_date >= ''2023-01-01'' AND v.upload_date < ''2024-01-01'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find all videos with "Tutorial" in the title.', 'SELECT v.title FROM video.videos v WHERE v.title ILIKE ''%Tutorial%'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find how many videos each user has uploaded.', 'SELECT u.name, COUNT(v.video_id) AS video_count FROM video.users u LEFT JOIN video.videos v ON u.user_id = v.author_id GROUP BY u.user_id, u.name;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find users who have uploaded more than 5 videos.', 'SELECT u.name, COUNT(v.video_id) AS video_count FROM video.users u JOIN video.videos v ON u.user_id = v.author_id GROUP BY u.user_id, u.name HAVING COUNT(v.video_id) > 5;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'List all comments with the video title and commenter name.', 'SELECT c.comment_text, v.title AS video_title, u.name AS commenter_name FROM video.comments c JOIN video.videos v ON c.video_id = v.video_id JOIN video.users u ON c.user_id = u.user_id;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find videos that have no comments.', 'SELECT v.title FROM video.videos v WHERE NOT EXISTS (SELECT 1 FROM video.comments c WHERE c.video_id = v.video_id);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find videos that have more comments than the average (above average comments).', 'SELECT v.title, COUNT(c.comment_id) AS comment_count FROM video.videos v JOIN video.comments c ON c.video_id = v.video_id GROUP BY v.video_id, v.title HAVING COUNT(c.comment_id) > (SELECT AVG(sub.comment_count) FROM (SELECT COUNT(*) AS comment_count FROM video.comments GROUP BY video_id) sub);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Classify each video as "Short" or "Long" based on its duration (5 minutes threshold).', 'SELECT v.title, CASE WHEN v.duration < 300 THEN ''Short'' ELSE ''Long'' END AS length_category FROM video.videos v;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find videos where the author has commented on their own video.', 'SELECT v.title FROM video.videos v WHERE EXISTS (SELECT 1 FROM video.comments c WHERE c.video_id = v.video_id AND c.user_id = v.author_id);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find all videos in either the Comedy or Drama category.', 'SELECT v.title, c.name AS category_name FROM video.videos v JOIN video.categories c ON v.category_id = c.category_id WHERE c.name IN (''Comedy'', ''Drama'');');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find all videos uploaded by the user Alice.', 'SELECT v.title FROM video.videos v WHERE v.author_id = (SELECT u.user_id FROM video.users u WHERE u.name = ''Alice'');');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find videos that are longer than any video uploaded by Alice.', 'SELECT v.title, v.duration FROM video.videos v WHERE v.duration > ALL (SELECT v2.duration FROM video.videos v2 JOIN video.users u2 ON v2.author_id = u2.user_id WHERE u2.name = ''Alice'');');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find the average number of videos uploaded per user.', 'SELECT AVG(video_count) FROM (SELECT COUNT(*) AS video_count FROM video.videos GROUP BY author_id) sub;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find the top 5 longest videos by duration.', 'SELECT v.title, v.duration FROM video.videos v ORDER BY v.duration DESC LIMIT 5;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find the top 3 users by number of videos uploaded.', 'SELECT u.name, COUNT(v.video_id) AS video_count FROM video.users u JOIN video.videos v ON u.user_id = v.author_id GROUP BY u.user_id, u.name ORDER BY COUNT(v.video_id) DESC LIMIT 3;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find all users who have never uploaded a video.', 'SELECT u.name FROM video.users u WHERE u.user_id NOT IN (SELECT author_id FROM video.videos);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find how many comments each video has (sorted by comment count).', 'SELECT v.title, COUNT(c.comment_id) AS comment_count FROM video.videos v LEFT JOIN video.comments c ON v.video_id = c.video_id GROUP BY v.video_id, v.title ORDER BY COUNT(c.comment_id) DESC;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find all categories that have no videos.', 'SELECT c.name FROM video.categories c WHERE NOT EXISTS (SELECT 1 FROM video.videos v WHERE v.category_id = c.category_id);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('video', 'Find all users who have both uploaded videos and commented on videos.', 'SELECT u.name FROM video.users u WHERE u.user_id IN (SELECT author_id FROM video.videos) AND u.user_id IN (SELECT user_id FROM video.comments);');

INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Show all messages with the sender''s and receiver''s names.', 'SELECT m.content, s.name AS sender_name, r.name AS receiver_name FROM messenger.messages m JOIN messenger.users s ON m.sender_id = s.user_id JOIN messenger.users r ON m.receiver_id = r.user_id;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all messages sent by user Alice.', 'SELECT m.content FROM messenger.messages m JOIN messenger.users u ON m.sender_id = u.user_id WHERE u.name = ''Alice'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all messages exchanged between Alice and Bob.', 'SELECT m.content FROM messenger.messages m JOIN messenger.users s ON m.sender_id = s.user_id JOIN messenger.users r ON m.receiver_id = r.user_id WHERE (s.name = ''Alice'' AND r.name = ''Bob'') OR (s.name = ''Bob'' AND r.name = ''Alice'');');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find how many messages each user has sent.', 'SELECT u.name, COUNT(m.message_id) AS sent_count FROM messenger.users u LEFT JOIN messenger.messages m ON u.user_id = m.sender_id GROUP BY u.user_id, u.name;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find users who have sent more than 100 messages.', 'SELECT u.name, COUNT(m.message_id) AS sent_count FROM messenger.users u JOIN messenger.messages m ON u.user_id = m.sender_id GROUP BY u.user_id, u.name HAVING COUNT(m.message_id) > 100;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find the user who sent the most messages.', 'SELECT u.name, COUNT(m.message_id) AS sent_count FROM messenger.messages m JOIN messenger.users u ON m.sender_id = u.user_id GROUP BY u.user_id, u.name ORDER BY COUNT(m.message_id) DESC LIMIT 1;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all users who have never sent a message.', 'SELECT u.name FROM messenger.users u WHERE u.user_id NOT IN (SELECT sender_id FROM messenger.messages);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all users who have never received a message.', 'SELECT u.name FROM messenger.users u WHERE u.user_id NOT IN (SELECT receiver_id FROM messenger.messages);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all messages that were sent by a user to themselves.', 'SELECT m.content, u.name AS user_name FROM messenger.messages m JOIN messenger.users u ON m.sender_id = u.user_id WHERE m.sender_id = m.receiver_id;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find the average number of messages sent per user.', 'SELECT AVG(message_count) FROM (SELECT COUNT(*) AS message_count FROM messenger.messages GROUP BY sender_id) sub;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find the number of messages sent each month in 2023.', 'SELECT DATE_TRUNC(''month'', m.sent_at) AS month, COUNT(*) AS message_count FROM messenger.messages m WHERE m.sent_at >= ''2023-01-01'' AND m.sent_at < ''2024-01-01'' GROUP BY DATE_TRUNC(''month'', m.sent_at) ORDER BY month;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all users who have both sent and received at least one message.', 'SELECT u.name FROM messenger.users u WHERE u.user_id IN (SELECT sender_id FROM messenger.messages) AND u.user_id IN (SELECT receiver_id FROM messenger.messages);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find users who have sent messages but never received any.', 'SELECT u.name FROM messenger.users u WHERE u.user_id IN (SELECT sender_id FROM messenger.messages) AND u.user_id NOT IN (SELECT receiver_id FROM messenger.messages);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all messages that contain the word hello (case-insensitive).', 'SELECT m.content FROM messenger.messages m WHERE m.content ILIKE ''%hello%'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find all messages sent on 2023-05-01 (with sender name).', 'SELECT m.content, u.name AS sender_name FROM messenger.messages m JOIN messenger.users u ON m.sender_id = u.user_id WHERE DATE(m.sent_at) = ''2023-05-01'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find the longest message by content length.', 'SELECT m.content, LENGTH(m.content) AS length FROM messenger.messages m ORDER BY LENGTH(m.content) DESC LIMIT 1;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find how many messages each user has received.', 'SELECT u.name, COUNT(m.message_id) AS received_count FROM messenger.users u LEFT JOIN messenger.messages m ON u.user_id = m.receiver_id GROUP BY u.user_id, u.name;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find the user who has received the most messages.', 'SELECT u.name, COUNT(m.message_id) AS received_count FROM messenger.messages m JOIN messenger.users u ON m.receiver_id = u.user_id GROUP BY u.user_id, u.name ORDER BY COUNT(m.message_id) DESC LIMIT 1;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Find how many messages were exchanged between Alice and Bob.', 'SELECT COUNT(*) AS message_count FROM messenger.messages m JOIN messenger.users s ON m.sender_id = s.user_id JOIN messenger.users r ON m.receiver_id = r.user_id WHERE (s.name = ''Alice'' AND r.name = ''Bob'') OR (s.name = ''Bob'' AND r.name = ''Alice'');');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('messenger', 'Classify each message as Recent or Older depending on whether it was sent in 2023.', 'SELECT m.content, CASE WHEN m.sent_at >= ''2023-01-01'' AND m.sent_at < ''2024-01-01'' THEN ''Recent'' ELSE ''Older'' END AS time_category FROM messenger.messages m;');

INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Show all orders with the customer, restaurant, and courier names.', 'SELECT o.order_id, c.name AS customer, r.name AS restaurant, d.name AS courier FROM delivery.orders o JOIN delivery.customers c ON o.customer_id = c.customer_id JOIN delivery.restaurants r ON o.restaurant_id = r.restaurant_id JOIN delivery.couriers d ON o.courier_id = d.courier_id;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find all orders delivered by the courier Alice.', 'SELECT o.order_id, o.order_date FROM delivery.orders o JOIN delivery.couriers d ON o.courier_id = d.courier_id WHERE d.name = ''Alice'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find all orders placed by customer Bob in 2023.', 'SELECT o.order_id, o.order_date, o.total_amount FROM delivery.orders o JOIN delivery.customers c ON o.customer_id = c.customer_id WHERE c.name = ''Bob'' AND o.order_date >= ''2023-01-01'' AND o.order_date < ''2024-01-01'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find how many orders each customer has placed.', 'SELECT c.name, COUNT(o.order_id) AS order_count FROM delivery.customers c LEFT JOIN delivery.orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find customers who have placed more than 10 orders.', 'SELECT c.name, COUNT(o.order_id) AS order_count FROM delivery.customers c JOIN delivery.orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name HAVING COUNT(o.order_id) > 10;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find how many orders each courier has delivered.', 'SELECT d.name, COUNT(o.order_id) AS delivered_count FROM delivery.couriers d JOIN delivery.orders o ON d.courier_id = o.courier_id GROUP BY d.courier_id, d.name;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find couriers who have delivered more than 50 orders.', 'SELECT d.name, COUNT(o.order_id) AS delivered_count FROM delivery.couriers d JOIN delivery.orders o ON d.courier_id = o.courier_id GROUP BY d.courier_id, d.name HAVING COUNT(o.order_id) > 50;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find the courier who has delivered the most orders.', 'SELECT d.name, COUNT(o.order_id) AS delivery_count FROM delivery.orders o JOIN delivery.couriers d ON o.courier_id = d.courier_id GROUP BY d.courier_id, d.name ORDER BY COUNT(o.order_id) DESC LIMIT 1;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find all customers who have never placed an order.', 'SELECT c.name FROM delivery.customers c WHERE c.customer_id NOT IN (SELECT customer_id FROM delivery.orders);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find all restaurants that have not received any orders.', 'SELECT r.name FROM delivery.restaurants r WHERE r.restaurant_id NOT IN (SELECT restaurant_id FROM delivery.orders);');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find all orders that have not been delivered yet.', 'SELECT o.order_id, o.order_date FROM delivery.orders o WHERE o.status <> ''delivered'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find all orders delivered in January 2023.', 'SELECT o.order_id, o.order_date, c.name AS customer FROM delivery.orders o JOIN delivery.customers c ON o.customer_id = c.customer_id WHERE o.order_date >= ''2023-01-01'' AND o.order_date < ''2023-02-01'';');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find the average order total amount for each customer.', 'SELECT c.name, AVG(o.total_amount) AS avg_spent FROM delivery.customers c JOIN delivery.orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find the total revenue for each restaurant.', 'SELECT r.name, SUM(o.total_amount) AS total_revenue FROM delivery.restaurants r JOIN delivery.orders o ON r.restaurant_id = o.restaurant_id GROUP BY r.restaurant_id, r.name;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find restaurants that have received more than 100 orders.', 'SELECT r.name, COUNT(o.order_id) AS order_count FROM delivery.restaurants r JOIN delivery.orders o ON r.restaurant_id = o.restaurant_id GROUP BY r.restaurant_id, r.name HAVING COUNT(o.order_id) > 100;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find the top 5 customers by total money spent.', 'SELECT c.name, SUM(o.total_amount) AS total_spent FROM delivery.customers c JOIN delivery.orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY SUM(o.total_amount) DESC LIMIT 5;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find customers who have ordered from more than 5 different restaurants.', 'SELECT c.name, COUNT(DISTINCT o.restaurant_id) AS restaurant_count FROM delivery.customers c JOIN delivery.orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name HAVING COUNT(DISTINCT o.restaurant_id) > 5;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find couriers who have delivered to at least 3 different customers.', 'SELECT d.name, COUNT(DISTINCT o.customer_id) AS customer_count FROM delivery.couriers d JOIN delivery.orders o ON d.courier_id = o.courier_id GROUP BY d.courier_id, d.name HAVING COUNT(DISTINCT o.customer_id) >= 3;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Label each order as High Value or Standard based on its total amount (threshold 100).', 'SELECT o.order_id, CASE WHEN o.total_amount > 100 THEN ''High Value'' ELSE ''Standard'' END AS value_category FROM delivery.orders o;');
INSERT INTO test_cases (domain, natural_language, reference_sql) VALUES ('delivery', 'Find customers who have never ordered from Pizza Palace.', 'SELECT c.name FROM delivery.customers c WHERE NOT EXISTS (SELECT 1 FROM delivery.orders o JOIN delivery.restaurants r ON o.restaurant_id = r.restaurant_id WHERE c.customer_id = o.customer_id AND r.name = ''Pizza Palace'');');
